{
  "filePath": "C:\\Projects\\Assess\\test-assets\\test1.assess_project",
  "assetPath": "",
  "assetFilePath": "test1-assets.json",
  "schema": {
    "as_assets": [
      {
        "as_asset_type_name": "imageaafff",
        "as_asset_type_type": "image",
        "as_asset_type_fields": [
          {
            "as_asset_field_data_type": "as_file",
            "as_asset_field_name": "src",
            "extensions": [
              "png",
              "jpg",
              "gif"
            ],
            "as_asset_field_loader": "imageh",
            "defaulttest": "default"
          },
          {
            "as_asset_field_data_type": "as_string",
            "as_asset_field_name": "description"
          },
          {
            "as_asset_field_data_type": "as_int",
            "as_asset_field_name": "ttt",
            "number": 13545
          },
          {
            "as_asset_field_data_type": "as_int",
            "as_asset_field_name": "testdds"
          },
          {
            "as_asset_field_data_type": "as_int",
            "as_asset_field_name": "checkffdssdfsdfsdfsdf"
          }
        ]
      },
      {
        "as_asset_type_name": "entity",
        "as_asset_type_type": "entity",
        "as_asset_type_fields": [
          {
            "as_asset_field_data_type": "as_string",
            "as_asset_field_name": "name"
          }
        ]
      },
      {
        "as_asset_type_name": "config",
        "as_asset_type_type": "config",
        "as_asset_type_fields": [
          {
            "as_asset_field_data_type": "as_int",
            "as_asset_field_name": "width"
          },
          {
            "as_asset_field_data_type": "as_int",
            "as_asset_field_name": "height"
          },
          {
            "as_asset_field_data_type": "as_boolean",
            "as_asset_field_name": "decorated"
          }
        ]
      }
    ],
    "assets_2": [
      {
        "as_asset_type_name": "test2",
        "as_asset_type_type": "test 2",
        "as_asset_type_fields": [
          {
            "as_asset_field_data_type": "as_string",
            "as_asset_field_name": "field 2"
          }
        ]
      },
      {
        "as_asset_type_name": "asset type 2",
        "as_asset_type_type": "type3",
        "as_asset_type_fields": [
          {
            "as_asset_field_data_type": "as_string",
            "as_asset_field_name": "vvddd"
          },
          {
            "as_asset_field_data_type": "as_boolean",
            "as_asset_field_name": "vvvsdfsfdfsdfsd"
          }
        ]
      }
    ]
  },
  "structure": {
    "assets": "as_assets",
    "assets2": "assets_2"
  },
  "mappings": {
    "as_assets": "as_assets",
    "as_asset_type_type": "type"
  },
  "loaders": {
    "Loader3": {
      "name": "Loader3",
      "body": "\nexports.create = function create(value) {\n\treturn {\n\t\ttemplate: function() {\n\t\t\treturn '<input type=\"text\" value=\"' + value + '\"/>'\n\t\t},\n\t\tsetup: function(elem, updateValueFunc) {\n\t\t\telem.onchange = function(newVal) {\n\t\t\t\tupdateValueFunc(newVal.target.value);\n\t\t\t};\n\t\t}\n\t}\n}\n\t\t\t"
    },
    "Loader4": {
      "name": "Loader4",
      "body": "\nexports.create = function create(value) {\n\treturn {\n\t\ttemplate: function() {\n\t\t\treturn '<input type=\"text\" value=\"' + value + '\"/>'\n\t\t},\n\t\tsetup: function(elem, updateValueFunc) {\n\t\t\telem.onchange = function(newVal) {\n\t\t\t\tupdateValueFunc(newVal.target.value);\n\t\t\t};\n\t\t}\n\t}\n}\n\t\t\t"
    },
    "Loader1d": {
      "name": "Loader1",
      "body": "\nexports.create = function create(value) {\n\treturn {\n\t\ttemplate: function() {\n\t\t\treturn '<input type=\"text\" value=\"' + value + '\"/>'\n\t\t},\n\t\tsetup: function(elem, updateValueFunc) {\n\t\t\telem.onchange = function(newVal) {\n\t\t\t\tupdateValueFunc(newVal.target.value);\n\t\t\t};\n\t\t}\n\t}\n}\n\t\t\t"
    },
    "Loader2ssd": {
      "name": "Loader2",
      "body": "\nexports.create = function create(value) {\n\treturn {\n\t\ttemplate: function() {\n\t\t\treturn '<input type=\"text\" value=\"' + value + '\"/>'\n\t\t},\n\t\tsetup: function(elem, updateValueFunc) {\n\t\t\telem.onchange = function(newVal) {\n\t\t\t\tupdateValueFunc(newVal.target.value);\n\t\t\t};\n\t\t}\n\t}\n}\n\t\t\t"
    },
    "imageh": {
      "name": "image",
      "body": "exports.create = function create(value){\n\treturn{\n\t\ttemplate: function(){\n\n\t\t\tvar style = `\n\t\t\t\t<style>\n\t\t\t\t\t.img-asset{\n\t\t\t\t\t\tmax-height:50px;\n\t\t\t\t\t\tmax-width: 300px;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t`;\n\n\t\t\tvar fs = require('fs');\n\t\t\ttry{        \n\t\t\t\tfs.accessSync(value);\n\t\t\t\treturn style + '<img class=\"img-asset\" src=\"file://' + value + '\"/>';\n\t\t\t}catch(e){\n\t\t\t\treturn '<span>Select Image</span>';\n\t\t\t}\t\n\t\t},\n\t\tsetup: function(elem, updateValueFunc){\n\t\t\telem.onclick = function(){\n\t\t\t\tvar dialog = require('electron').remote.dialog;\n\t\t\t\tdialog.showOpenDialog(\n\t\t\t\t\t{ properties: ['openFile'], filters: [{ name: 'Image', extensions: ['png', 'jpg'] }] },\n\t\t\t\t\t(file) => {\n\t\t\t\t\t\tif (file != undefined) {\n\t\t\t\t\t\t\tupdateValueFunc(file.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t};\n\t\t}\n\t}\n}"
    }
  }
}